消息的阻塞和非阻塞：
    阻塞：做某件事，直到完成，除非超时。如果没有完成，继续等待。
    非阻塞： 很顺畅的完成一件任务。能做就做完，不能做就直接返回。

1。传统方式：多线程方式支持多个客户端访问：
    优点：一对一服务。
    缺点：高并发情况下连接数很大。线程很占用资源，会开辟栈空间，占用资源。
    例子：一百个客户，则需要一百个服务员，一一对应。

2。Nio:
    --增加了一个重要的角色（selector），主要负责调度和监控客户端和服务端（调度器）
    --由阻塞方式改为非阻塞方式。

    --真正关心的阻塞点： this.selector.selector(); 是读取数据。
    例子：一百个客户，只需要4个服务员，一对多对应。

3。总结：
